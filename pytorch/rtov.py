# -*- coding: utf-8 -*-
"""tch_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EdPbNRZ6YJZGhSTW-h-h9gCmvd9R4mes
"""

import cv2
cv2_imshow = lambda img: cv2.imshow('', img)
import matplotlib.pyplot as plt
import numpy as np

from enum import IntEnum, auto
from typing import Union, Optional, Sequence, Generator

# Utils {{{

class Shapes(IntEnum):
    Line = 0
    Triangle = 1
    Rect = 2

Number = Union[int, float]

class Vec2:
    def __init__(self, x, y) -> None:
        self.x = x
        self.y = y

class Vec3:
    def __init__(self, x, y, z) -> None:
        self.x = x
        self.y = y
        self.z = z

    def as_tuple(self) -> tuple:
        return self.x, self.y, self.z

# }}}

# Data {{{

class DefaultPoints:
    @staticmethod
    def line(dim: Vec2, random: bool = True) -> np.ndarray:
        pts = np.zeros((2, 2), dtype=np.int32)
        if random:
            rng = np.random.default_rng()
            pts[:, 0] = rng.integers(
                low = 0, high = dim.x, size = 2)    # x values
            pts[:, 1] = rng.integers(
                low = 0, high = dim.y, size = 2)    # y values
            return pts

        # Diagonal line through the image from (0, 0)
        pts[0, 0] = dim.x
        pts[0, 1] = dim.y
        return pts

    @staticmethod
    def triangle(dim: Vec2, random: bool = True) -> np.ndarray:
        pts = np.zeros((3, 2), dtype=np.int32)

        # Random three points
        if random:
            rng = np.random.default_rng()
            pts[:, 0] = rng.integers(
                low = 0, high = dim.x, size = 3)    # x values
            pts[:, 1] = rng.integers(
                low = 0, high = dim.y, size = 3)    # y values
            return pts

        # (More or less) regular triangle
        pts[0, 0] = dim.x // 4      # Bottom left
        pts[0, 1] = dim.y // 4
        pts[1, 0] = dim.x * 3 // 4  # Bottom right
        pts[1, 1] = dim.y // 4
        pts[2, 0] = dim.x // 2      # Top mid
        pts[2, 1] = dim.y * 3 // 4
        return pts

    @staticmethod
    def rectangle(dim: Vec2, random: bool = True) -> np.ndarray:
        pts = np.zeros((4, 2), dtype=np.int32)

        if random:
            rng = np.random.default_rng()
            # Top left corner
            pts[0, 0] = rng.integers(0, dim.x * 3 // 4)  # Leave enough free space
            pts[0, 1] = rng.integers(0, dim.y * 3 // 4)
            # Bottom left corner, spans a rect with random height
            pts[1, 0] = pts[0, 0]
            pts[1, 1] = rng.integers(pts[0, 1], dim.y)
            # Top right corner -> random width
            pts[3, 0] = rng.integers(pts[0, 0], dim.x)
            pts[3, 1] = pts[0, 1]
            # Bottom right corner
            pts[2, 0] = pts[3, 0]
            pts[2, 1] = pts[1, 1]
            return pts

        # Regular rectangle
        pts[[0, 1], 0] = dim.x // 4     # Left edge
        pts[[0, 3], 1] = dim.y // 4     # Top edge
        pts[[2, 3], 0] = dim.x * 3 // 4 # Right edge
        pts[[1, 2], 1] = dim.y * 3 // 4 # Bottom edge
        return pts


def draw_on_image(img: np.ndarray, shape: Shapes | int, color: int = 0) -> np.ndarray:
    """Mutates `img` in-place"""
    if shape == Shapes.Line:
        pts = DefaultPoints.line(
            Vec2(img.shape[0], img.shape[1]), random=True)
        cv2.line(img, pts[0], pts[1], color)
        return pts
    elif shape == Shapes.Triangle:
        pts = DefaultPoints.triangle(
            Vec2(img.shape[0], img.shape[1]), random=True)
    elif shape == Shapes.Rect:
        pts = DefaultPoints.rectangle(
            Vec2(img.shape[0], img.shape[1]), random=True)
    else:
        raise ValueError("Unknown or unimplemented shape: {}".format(shape))
    cv2.fillPoly(img, [pts], color=color)
    return pts

# }}}

# Model {{{

# %pip install torch

import torch
from torch import nn
from torchvision import transforms

class MainModel(nn.Module):
    def __init__(self,
                 img_dim: Vec3,
                 batch_size: int = 32,
                 dropout_prob: float = 0.5) -> None:
        super(MainModel, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=32,
                      kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            # nn.BatchNorm2d(16),
            nn.MaxPool2d(kernel_size=2, stride=2), # Output shape: (32, 50, 50)

            nn.Conv2d(in_channels=32, out_channels=64,
                      kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            # nn.BatchNorm2d(32),
            nn.MaxPool2d(kernel_size=2, stride=2), # Output shape: (64, 25, 25)

            nn.Conv2d(in_channels=64, out_channels=128,
                      kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2),

        ) # Output shape: (32, 25, 25)
        #   32: Channels
        #   25x25: Resulting width and height

        self.dropout = nn.Dropout(p=dropout_prob)

        self.fc_color = nn.Linear(128 * 12 * 12,
                                  out_features = 3)  # 3 for each of the RGB channels
        self.fc_shape = nn.Sequential(
            nn.Linear(128 * 12 * 12,
                      out_features = 128, bias = True),
            nn.ReLU(),
            # nn.BatchNorm1d(128),
            nn.Linear(128, len(Shapes)),
        )
        self.fc_first_point = nn.Sequential(
            nn.Linear(32 * 25 * 25,
                      out_features = 128, bias = True),
            nn.ReLU(),
            # nn.BatchNorm1d(128),
            nn.Linear(128, 2)       # 2: x and y coordinate
        )

    def forward(self, x):
        x = self.conv_layers(x)
        # x = self.dropout(x)
        x = x.view(x.size(0), -1)
        shape = self.fc_shape(x)
        #color = self.fc_color(features)
        #first_point = self.fc_first_point(features)
        return shape

# }}}

# Glue {{{

import torch
from torch.utils.data import Dataset
import torch.optim as optim
from torch.utils.data import DataLoader

class LazyDataset(Dataset):
    def __init__(self, img_dim: Vec3, num_samples, transform=None):
        self.num_samples = num_samples
        self.transform = transform
        self.features = np.zeros(img_dim.as_tuple(), dtype=np.float32)
        self.tensor = np.zeros((img_dim.z, img_dim.x, img_dim.y), dtype=np.float32)

    def __len__(self):
        return self.num_samples

    def __getitem__(self, i):
        self.features[:] = np.full(self.features.shape, 255)    # Overwrite the memory directly to (hopefully) reduce memory => fewer GC cycles
        shape = np.random.default_rng().integers(len(Shapes))
        pts = draw_on_image(self.features, shape, color=0)
        if self.transform:
            self.tensor[:] = self.transform(self.features)
        # TODO: Calc size + first point
        return self.tensor, shape

transform_fn = transforms.Compose([
    #transforms.Resize((100, 100, 3)),
    #transforms.RandomHorizontalFlip(),  # Randomly flip the image horizontally
    transforms.ToTensor(),
    #transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize the image
])


def validate_model(model, dataloader):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for i, (inputs, labels) in enumerate(dataloader):
            outputs = model(inputs)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    return correct / total

# }}}

# Training {{{

import torch.optim as optim
from tensorboardX import SummaryWriter

# {{{
num_epochs = 7
batch_size = 32
weight_decay = 1e-4


# Define the model
model = MainModel(img_dim=Vec3(100, 100, 3), batch_size=batch_size)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
# criterion = torchmetrics.classification.Accuracy(task="multiclass", num_classes=5)
optimizer = optim.Adam(model.parameters(), lr=0.000005, weight_decay=weight_decay)

# Data generation and preprocessing
train_dataset = LazyDataset(
    img_dim = Vec3(100, 100, 3),
    num_samples = 30 * batch_size,
    transform = transform_fn,
)
dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

val_dataset = LazyDataset(
    img_dim = Vec3(100, 100, 3),
    num_samples = batch_size,
    transform = transform_fn,
)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)


# Learning rate scheduler
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, patience=2)

# Plot data
train_losses = np.zeros(num_epochs * len(dataloader))
train_accuracies = np.zeros(num_epochs * len(dataloader))
val_losses = np.zeros(num_epochs)
val_accuracies = np.zeros(num_epochs)

log_dir = "logs"  # You can choose any directory name you prefer

# Create a SummaryWriter
writer = SummaryWriter(log_dir)

# }}}

# Training loop
for epoch in range(num_epochs):
    running_loss = 0.0
    correct_predictions = 0
    total_samples = 0

    for i, (inputs, labels) in enumerate(dataloader):
        # Zero the parameter gradients
        optimizer.zero_grad()

        # Forward pass
        outputs = model(inputs)

        # Calculate loss
        loss = criterion(outputs, labels)
        loss_val = loss.item()

        # Back propagation and optimization
        loss.backward()
        optimizer.step()

        # Update running loss
        running_loss += loss
        train_losses[epoch * len(dataloader) + i] = loss

        # Calculate accuracy
        _, predicted = torch.max(outputs.data, 1)
        correct_predictions += (predicted == labels).sum().item()
        total_samples += labels.size(0)
        train_accuracies[epoch * len(dataloader) + i] = correct_predictions / total_samples

        # Write scalars to TensorBoard
        writer.add_scalar('Loss/train', loss, global_step=epoch)
        writer.add_scalar('Accuracy/train', correct_predictions / total_samples, global_step=epoch)

    # Calculate accuracy for the epoch
    epoch_accuracy = correct_predictions / total_samples
    train_accuracies[epoch] = epoch_accuracy
    writer.add_scalar('Accuracy/validation', epoch_accuracy, global_step=epoch)

    # Calculate validation loss
    validation_loss = validate_model(model, val_loader)
    val_losses[epoch] = validation_loss
    writer.add_scalar('Loss/validation', validation_loss, global_step=epoch)

    # Step the learning rate scheduler based on validation loss
    scheduler.step(validation_loss)

    # Print loss at the end of each epoch
    print(f'Epoch {epoch+1}/{num_epochs}, Loss: {running_loss / len(dataloader)}')

# Save the trained model
torch.save(model.state_dict(), 'trained_model.pth')


# Plot loss curves
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(train_losses, label="Train")
plt.plot(val_losses, label="Validation")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

# Plot accuracy curves
plt.subplot(1, 2, 2)
plt.plot(train_accuracies, label="Train")
plt.plot(val_accuracies, label="Validation")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

plt.show()

# }}}

# Visualization {{{
rows, cols = 3, 3

model.eval()

test_dataset = LazyDataset(
    img_dim = Vec3(100, 100, 3),
    num_samples = 32,
    transform = transform_fn,
)
dataloader = DataLoader(train_dataset, batch_size=32, shuffle=True)

fig, axes = plt.subplots(rows, cols, figsize=(10, 5))
for i in range (cols * rows):
    ax = axes[i // cols, i % cols]
    ax.axis('off')

    # Take the first batch
    imgs, labels = next(iter(dataloader))
    predictions = model(imgs)

    # Take the last one of this batch, because it's the only one with an image
    pred = predictions[-1].argmax()
    img, label = imgs[-1], labels[-1]

    # CHW -> HWC (32, 100, 100, 3)
    img = np.transpose(img, (1, 2, 0))

    # Display the image and prediction
    ax.imshow(img)
    ax.set_title(f'{label} -> {pred}')
    print(f'{label} -> {predictions[-1]}')

plt.tight_layout()
plt.show()


## Note for me:
#    Because the memory of the images are overwritten, we can't just show
#    them afterwards. There is only the last image shown.

# }}}

# Analytics {{{

# # %pip install torchviz
# from torchviz import make_dot

# Visualize the net

# model = MainModel(Vec3(100, 100, 3), batch_size=32)

# img = np.ones((100, 100, 3), dtype=np.ubyte)

# x = transform_fn(img)
# y = model(x)

# make_dot(y.mean(), params=dict(model.named_parameters()))
# }}}
